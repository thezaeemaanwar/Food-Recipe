{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","className","style","map","ingredient","key","indexOf","text","src","alt","App","useState","Recipes","setRecipes","Search","setSearch","Query","setQuery","Health","setHealth","Diet","setDiet","useEffect","a","getRecepies","word","exampleRed","fetch","response","json","data","hits","id","onSubmit","e","preventDefault","document","getElementById","value","window","location","type","onChange","target","href","charAt","toUpperCase","slice","recipe","label","toFixed","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.05a0dc53.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Recipe\":\"recipe_Recipe__31CIO\",\"image\":\"recipe_image__38x2C\",\"calories\":\"recipe_calories__1EwwY\"};","import React from \"react\";\r\nimport style from './recipe.module.css';\r\n\r\nexport default function Recipe({ title, calories, image, ingredients }) {\r\n  return (\r\n    <div className = {style.Recipe}>\r\n      <h2>{title}</h2>\r\n      <h3 className ={style.calories} >Ingredients</h3>\r\n      <ol>\r\n          {ingredients.map(ingredient => (\r\n              <li key = {ingredients.indexOf(ingredient.text)}>{\r\n                ingredient.text}</li>\r\n          ))}\r\n      </ol>\r\n      <h3 className = {style.calories} >Calories : {calories}</h3>\r\n      <img className = {style.image} src={image} alt={title} />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport Recipe from './Recipe';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  const APP_ID = '23b19a81';\r\n  const APP_KEY = '10d454b3c2543dcdf8e1858b3e1b8f51';\r\n\r\n  // The Recepies Fetched\r\n  const [Recipes, setRecipes] = useState([]);\r\n  // The value tyoed in search\r\n  const [Search, setSearch] = useState('');\r\n  // Complete Search\r\n  const [Query, setQuery] = useState('');\r\n  // Health Type\r\n  const [Health, setHealth] = useState('alcohol-free');\r\n  // Diet Type\r\n  const [Diet, setDiet] = useState('balanced');\r\n\r\n  // The rendering function\r\n  useEffect(() => {\r\n    (async () => getRecepies())();\r\n  }, [Query]);\r\n\r\n  const exampleRed = `https://api.edamam.com/search?q=${Query}&app_id=${APP_ID}&app_key=${APP_KEY}&diet=${Diet}&health=${Health}`;\r\n\r\n  // Fetch data from the API and set the state of Recipe\r\n  const getRecepies = async () => {\r\n    const response = await fetch(exampleRed);\r\n    const data = await response.json();\r\n    setRecipes(data.hits);\r\n  };\r\n\r\n  // Update the state Search on every change\r\n  const updateSearch = (e) => {\r\n    setSearch(e.target.value);\r\n  };\r\n\r\n  // Get the value of Search when a complete word is entered\r\n  const getSearch = (e) => {\r\n    e.preventDefault();\r\n    setQuery(Search);\r\n    setHealth(document.getElementById('health').value);\r\n    setDiet(document.getElementById('diet').value);\r\n    setSearch('');\r\n    window.location = '#recipe';\r\n  };\r\n\r\n  // Capitalize the first letter of word\r\n  const capitalize = (word) => {\r\n    return word.charAt(0).toUpperCase() + word.slice(1);\r\n  };\r\n\r\n  return (\r\n    <div className='App'>\r\n      <h1 className='header'>Welcome to fooderia</h1>\r\n      <h3 className='description'>\r\n        Get the recipes of your favorite foods Type in the Search bar what you\r\n        want to make alongwith the calories and food-type{' '}\r\n      </h3>\r\n      <div className='navbar'>\r\n        <div id='logo'>\r\n          <h2>fooderia</h2>\r\n        </div>\r\n        <form onSubmit={getSearch} className='search-form'>\r\n          <select className='dropdown' id='health'>\r\n            <option value='alcohol-free'> Alcohol Free</option>\r\n            <option value='tree-nut-free'> Tree Nut free </option>\r\n            <option value='peanut-free'> Peanut Free </option>\r\n            <option value='sugar-conscious'> Sugar Conscious </option>\r\n            <option value='vegan'> Vegan </option>\r\n            <option value='vegetarian'> Vegetarian </option>\r\n          </select>\r\n          <select className='dropdown' id='diet'>\r\n            <option value='balanced'> Balanced </option>\r\n            <option value='high-protein'> High Protein </option>\r\n            <option value='low-carb'> Low Carb </option>\r\n            <option value='low-fat'> Low Fat </option>\r\n          </select>\r\n\r\n          <input\r\n            className='search-bar'\r\n            type='text'\r\n            value={Search}\r\n            onChange={updateSearch}\r\n          />\r\n          <a href='#head' className='search-button' type='submit'>\r\n            View\r\n          </a>\r\n        </form>\r\n      </div>\r\n      <div id='head'>\r\n        <h1 className='heading'>{capitalize(Query)} Recipes</h1>\r\n        <div className='recipes'>\r\n          {Recipes.map((recipe) => (\r\n            <Recipe\r\n              key={Recipes.indexOf(recipe)}\r\n              title={recipe.recipe.label}\r\n              calories={recipe.recipe.calories.toFixed(5)}\r\n              image={recipe.recipe.image}\r\n              ingredients={recipe.recipe.ingredients}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}